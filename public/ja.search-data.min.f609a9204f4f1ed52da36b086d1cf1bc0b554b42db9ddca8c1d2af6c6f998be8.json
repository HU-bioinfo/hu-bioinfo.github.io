[{"id":0,"href":"/docs/tutorials/","title":"Tutorials","section":"Docs","content":" Tutorials # "},{"id":1,"href":"/docs/tutorials/tidyverse/","title":"Tidyverse","section":"Tutorials","content":" Tidyverse # Tidyverseってなんぞや # Tidyverseは，データ分析と可視化を効率的に行うために設計されたR言語のパッケージ群です． このパッケージの思想上の特徴としてTidy Dataの原則のもと，一貫性のある操作体系により，データ処理の生産性を保つことを特徴としています．\nとはいえ含まれる内容や思想も膨大かつ難解なので，この章では，よくする使い方をメインに書いていきます． より詳しく知りたい方は，それぞれ詳細のページを見てください．\nパッケージ名 役割 主な機能 ggplot2 データ可視化 グラフィックスの文法に基づいて、グラフを宣言的に作成できる dplyr データ操作 フィルタリング，要約，並べ替え，結合といったデータ操作 tidyr データ整理 Tidy data作成 readr データ読み込み 矩形データ（csv、tsv、fwfなど）の高速読み込み purrr 関数型プログラミング ベクトルやリストの操作（map関数など） tibble データフレームの現代的な再構築 モダンなデータフレーム構造 stringr 文字列操作 パターンマッチングや文字列の処理 forcats 因子型操作 因子データのレベルの順序や値の変更など lubridate 日付・時刻データ操作 日付や時間の解析と処理 Tidy Data # 基本的にデータはExcelのように表形式となったデータを扱います．この時，ただ漫然と表を作成するのではなく，一定のルールの下に作成，加工していくことで効率や安全性が増します．具体的なルールとは以下の三つのことです.\n一つの変数は一つの列に（Each variable must have its own column.） 一つの観測は一つの行に（Each observation must have its own row.） 一つの値は一つのセルに（Each value must have its own cell.） 上記3つを満たした表形式のデータを Tidy Data(整列データ) といいます．\n一つの変数は一つの列に（Each variable must have its own column.） # 一つの観測は一つの行に（Each observation must have its own row.） # 一つの値は一つのセルに（Each value must have its own cell.） # 以上の内容を意識すると，統一的な記述方法でデータを解析，整形することができるので，tidy dataを意識してデータ解析すると良いでしょう．\n余談 Tidy Dataが解析しやすいデータだとすれば，それ以外のデータは解析しずらい，めんどくさいデータです．例え人にとって見やすかったり，扱いやすかったりしてもTidyでないならコンピュータには扱いづらいです．そのため，データを提供する側と解析する側では，往々にしてこの部分ですれ違いがあったりするので，何かデータを扱うときはTidyであるかどうかを気にしてみるといいかもしれません．\nパイプライン演算子 # Tidyverseを使用していく上でパイプライン演算子を活用することで，処理を簡潔かつ解釈しやすく記述することができます．\n関数 # まず，パイプライン演算子を使う前に，プログラミングにおける関数について説明します．プログラミングにおける関数は，ある処理のまとまりを集めて，いつでも呼び出せるようにしたものです．これは数学における，ある集合からある集合への対応規則を示す関数とは違い，サブルーチンといった方がより適切です．そのため，処理をまとめただけの関数もあれば，ある入力に対してある出力を返す関数があったりします．\nここで入力に対応するものを引数，出力に対応するものを返り値(戻り値)といいます．\nしかし，純粋関数という概念が考案されました．純粋関数とは所謂，数学における関数と等価なもので，ある入力(引数)に対して，いつも同じ出力(返り値)を返す関数です．この純粋関数を組み合わせることでコーディングをしていくのがTidyverseとパイプラインを組み合わせた方法です．\n具体的には純粋関数は，同じ引数に対して，特定の返り値を返すので，ある純粋関数の返り値をそのまま，別の純粋関数の引数に入力することで，処理を記述していきます．これまでのプログラミングといえばやりたいことを逐一丁寧に記述していく手続き型プログラミングといったものを行ってきました．しかし，それとは考え方，アプローチが違ってくるので戸惑う点があるかもしれません．とはいえ，基本的にプログラミングとは何をするかというと，与えられた入力(データ)を加工していく処理，作業に他なりません．その大前提を意識しておけば，どちらもやることがたいして変わりません．以下で具体例を見てみましょう．\nパイプライン演算子を使ってみよう # 初めに手続きプログラミング的にコードを書いてみます．以下のコードは，変数xを宣言し，x個のランダムな数字を持つ配列vecを宣言します．その配列vecをヒストグラムとして表示します．\nx \u0026lt;- 10 vec \u0026lt;- このようなコードでは，変数tmpのように演算結果を一時的に保存するためだけの変数を宣言したりと無駄が多いです．無駄が多くなると，論理を追いづらくなったり，コードを手直しするにも大変です．\n次の例では一時的な変数を作成しないようにコードを書き直してみます．\nこの書き方では，余計な変数はありませんが，関数の中に関数を書き込んだ形になってしまい，非常に可読性が悪いです．私たちは右から左，外から内に文字を読むのに，処理の流れは左から右に，内から外の順番になってしまっています． ここでパイプライン演算子の出番です．Rのパイプライン演算子はある関数の返り値をそのまま，次の関数の第一引数にしてしまいます．\nこうすることによって，処理の流れと記述の流れが同じになりました．純粋関数を用いると同じ引数に対し，同じ返り値が帰ってくるので，このような記述ができます．\nAdvanced やや発展的な内容になりますが，パイプライン演算子にはRで定義されたnative pipelineと呼ばれる|\u0026gt;とTidyverseのmagrittrパッケージによって提供されている%\u0026gt;%の2種類があります．\nこれらの使い分けとしては，返り値を第一引数ではない場所に用いたい時に，やり方が異なります．\n基本的には|\u0026gt;の方が速度も早く，何よりパッケージではなく，R言語そのもので定義されているので，|\u0026gt;を使用するのを個人的には推奨します．\nTidyverseで遊んでみよう # お待たせしました．ここからは実際にcsvデータを加工して，Tidyverseの凄さを思い知りましょう．Tidyverseには多くのパッケージが含まれますが，ここではよく使う，dplyrを中心に使っていきます．\nここで加工していくデータは,dplyr内に練習用として定義されているstarwarsのデータを用います．スターウォーズのキャラクターについての情報が詰まれたデータフレームです．\nstarwars #\u0026gt; # A tibble: 87 × 14 #\u0026gt; name height mass hair_color skin_color eye_color birth_year sex #\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; #\u0026gt; 1 Luke Sky… 172 77 blond fair blue 19 male #\u0026gt; 2 C-3PO 167 75 NA gold yellow 112 none #\u0026gt; 3 R2-D2 96 32 NA white, bl… red 33 none #\u0026gt; 4 Darth Va… 202 136 none white yellow 41.9 male #\u0026gt; 5 Leia Org… 150 49 brown light brown 19 fema… #\u0026gt; 6 Owen Lars 178 120 brown, gr… light blue 52 male #\u0026gt; 7 Beru Whi… 165 75 brown light blue 47 fema… #\u0026gt; 8 R5-D4 97 32 NA white, red red NA none #\u0026gt; 9 Biggs Da… 183 84 black light brown 24 male #\u0026gt; 10 Obi-Wan … 182 77 auburn, w… fair blue-gray 57 male #\u0026gt; # ℹ 77 more rows #\u0026gt; # ℹ 6 more variables: gender \u0026lt;chr\u0026gt;, homeworld \u0026lt;chr\u0026gt;, species \u0026lt;chr\u0026gt;, #\u0026gt; # films \u0026lt;list\u0026gt;, vehicles \u0026lt;list\u0026gt;, starships \u0026lt;list\u0026gt; 次に\n練習問題 # 問題1 # Tidyverseを用いてcsvファイルを読み込み，変数名dfに代入せよ．dfはどのようなデータ形式をしているか確認してください．\nAnswer 解答1 # df \u0026lt;- read_csv(\u0026#34;src/sample.csv\u0026#34;) df |\u0026gt; summary() 問題2 # Tidyverseを用いてcsvファイルを読み込み，変数名dfに代入せよ\nAnswer 解答2 # df \u0026lt;- read_csv(\u0026#34;src/sample.csv\u0026#34;) "},{"id":2,"href":"/docs/about/","title":"About","section":"Docs","content":"私たちは北海道大学医学部に在学する学生によって構成されている学生団体です. バイオインフォマティクスや広く情報科学ついて学習し合っている団体です．\n"},{"id":3,"href":"/docs/members/","title":"Members","section":"Docs","content":"Comming soon\u0026hellip;\n"},{"id":4,"href":"/docs/tutorials/example/","title":"Example","section":"Tutorials","content":" Example # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nCode example # def main(): print(\u0026#34;Hello wold\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Tex example # 数式もかけるよ: \\(\\int_{-\\infty}^{\\infty}e^{-t^2}dt=\\pi.\\) \\[ \\int_{-\\infty}^{\\infty}e^{-t^2}dt=\\pi. \\] Image example # "},{"id":5,"href":"/docs/how_to_write_articles/","title":"How to Write Articles","section":"Docs","content":" 記事の投稿方法 # 構成 # サイトはHugoのHugo-bookテーマ用いて作成しました． ディレクトリ構成は以下のとおりです． 基本的にいじるのはcontent以下のディレクトリだけです．\n. ├── archetypes ├── config └── _default ├── hugo.toml └── params.toml ├── content ├── docs │ ├── tutorials │ │ ├── example │ │ │ ├── bioinfo_tutorial.webp │ │ │ └── index.md │ │ ├── test │ │ │ └── index.md │ │ ├── _index.md │ │ └── bioinfo_tutorial.webp │ ├── about.md │ └── members.md └── _index.md ├── data ├── i18n ├── layouts ├── public ├── resources ├── static ├── go.mod └── go.sum 記事の作成 # まず，Githubリポジトリのmainブランチをローカルにcloneしてください． 自分で新しい記事を作成，修正するときは，mainではない別のブランチ(自分の名前とか)を作成し，そこで作業するようにしてください．\n今後は基本的にcontent/docs/tutorials以下に，一記事ずつディレクトリを作成していきます．\n├── content ├── docs │ ├── tutorials │ │ ├── new_article │ │ │ ├── images │ │ │ └── index.md 作成したい記事のディレクトリを作成し，index.mdを作り，編集します．\nindex.mdにはヘッダーとして以下のものをつけてください．\n--- title: \u0026#34;Example\u0026#34; weight: 1 # bookFlatSection: false # bookToc: true # bookHidden: false # bookCollapseSection: false # bookComments: false # bookSearchExclude: false --- このときtitleにはディレクトリ名と同じ名前を基本的にはつけてください． weightはサイトの左側メニューに表示される時の順番を示しています．上に載せたいものほど小さい値をつけてください． 挿入する画像は，作成したディレクトリ以下に配置してください．\nmarkdownの編集方法については，Hugo-bookのサイトのShortcodesや，私が作成した記事とサイトを見比べてみてください．\n投稿方法 # 記事の作成が完了したら，git add \u0026amp;\u0026amp; git commitして，リポジトリにそのまま自分のブランチをpushしてください．\npushした自分のブランチをmainブランチに向けてプルリクエストを作成してください．\n無事，プルリクが受理され，mainブランチにマージされたら，Github Actionsが走り，hugoによりサイトがビルドされます． 北大バイオインフォのサイトに変更がなされているか確認してみてください．\nリンク # Githubリポジトリ Github pages Hugo-book "}]